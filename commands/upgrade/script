#!/usr/bin/env bash
#
#/ command: rpm:upgrade: "Upgrade an RPM"
#
#/ usage: rerun rpm:upgrade  --package-file <> 
#
#/ rerun env variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option variables: PACKAGE_FILE

# Read module function library.
. $RERUN_MODULE_DIR/lib/functions.sh || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------
# * Trap calls `rerun_die` with standard message.
# * Exit upon command errors or accessing unset variables.
#   * See [set](http://ss64.com/bash/set.html)
trap 'rerun_die "*** command failed: rpm:upgrade. ***"' ERR
set -o nounset -o pipefail

# Parse the command options.
[[ -r $RERUN_MODULE_DIR/commands/upgrade/options.sh ]] && {
    . $RERUN_MODULE_DIR/commands/upgrade/options.sh || rerun_die "Failed loading options parser."
    rerun_options_parse "$@"
}


# ------------------------------
# Your implementation goes here.
# ------------------------------


#rpm -qp http://mvn-sdp-0.local:8080/job/dtolabs-toolchain-example5-jboss-as-rpm/lastSuccessfulBuild/artifact/jboss-as-rpm/RPMS/noarch/jboss-as-7.1.1.Final-1.noarch.rpm  --qf '%{NAME}-%{VERSION}-%{RELEASE}.%{ARCH}\n'

if ! desiredRpmNameArch=$(rpm -qp $PACKAGE_FILE --qf '%{NAME}.%{ARCH}')
then
   rerun_die "package file $PACKAGE_FILE  does not appear to be in rpm format"
fi

if ! currentRpmVersion=$(rpm -q "${desiredRpmNameArch}" --qf '%{NAME}-%{VERSION}-%{RELEASE}.%{ARCH}' 2>/dev/null)
then
   currentRpmVersion=
fi

desiredRpmVersion=$(rpm -qp $PACKAGE_FILE --qf '%{NAME}-%{VERSION}-%{RELEASE}.%{ARCH}')

if [ "${currentRpmVersion}" != "${desiredRpmVersion}" ]
then
   sudo rpm --upgrade $PACKAGE_FILE
else
   echo "package ${currentRpmVersion}  is up to date"
fi


exit $?

# Done
