#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below. 

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
# 
#/ command: rpm:upgrade: "Upgrade an RPM"
#/ usage: rerun rpm:upgrade  --package-file <> 

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh upgrade || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: rpm:upgrade. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: PACKAGE_FILE

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.

rerun_options_parse "$@"


# Command implementation
# ----------------------

# - - -
# Put the command implementation here.
# - - -

#rpm -qp http://mvn-sdp-0.local:8080/job/dtolabs-toolchain-example5-jboss-as-rpm/lastSuccessfulBuild/artifact/jboss-as-rpm/RPMS/noarch/jboss-as-7.1.1.Final-1.noarch.rpm  --qf '%{NAME}-%{VERSION}-%{RELEASE}.%{ARCH}\n'

if ! desiredRpmNameArch=$(rpm -qp $PACKAGE_FILE --qf '%{NAME}.%{ARCH}')
then
   rerun_die "package file $PACKAGE_FILE  does not appear to be in rpm format"
fi

if ! currentRpmVersion=$(rpm -q "${desiredRpmNameArch}" --qf '%{NAME}-%{VERSION}-%{RELEASE}.%{ARCH}' 2>/dev/null)
then
   currentRpmVersion=
fi

desiredRpmVersion=$(rpm -qp $PACKAGE_FILE --qf '%{NAME}-%{VERSION}-%{RELEASE}.%{ARCH}')

if [ "${currentRpmVersion}" != "${desiredRpmVersion}" ]
then
   sudo rpm --upgrade $PACKAGE_FILE
else
   echo "package ${currentRpmVersion}  is up to date"
fi


exit $?

# Done
